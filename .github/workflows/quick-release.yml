name: Quick Release Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.4.0)'
        required: true
        default: 'v0.4.0'

permissions:
  contents: write
  packages: write

env:
  APP_NAME: playlistcat
  PYTHON_VERSION: '3.11'

jobs:
  # Build Linux first (fastest)
  build-linux:
    name: Build Linux
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb qt6-base-dev libqt6gui6 libqt6widgets6

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build application
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
        chmod +x ./build.sh
        ./build.sh

    - name: Create archive
      run: |
        cd release
        tar -czf "../playlistcat-linux-x64.tar.gz" .
        cd ..

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: playlistcat-linux-x64
        path: playlistcat-linux-x64.tar.gz

  # Build Windows second
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: build-linux
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build application
      shell: cmd
      run: |
        call .\build.bat

    - name: Create archive
      shell: bash
      run: |
        cd release
        7z a "../playlistcat-windows-x64.zip" .
        cd ..

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: playlistcat-windows-x64
        path: playlistcat-windows-x64.zip

  # Build macOS last
  build-macos:
    name: Build macOS
    runs-on: macos-latest
    needs: build-windows
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build application
      run: |
        chmod +x ./build.sh
        ./build.sh

    - name: Create archive
      run: |
        cd release
        tar -czf "../playlistcat-macos-x64.tar.gz" .
        cd ..

    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: playlistcat-macos-x64
        path: playlistcat-macos-x64.tar.gz

  # Create release after all builds complete
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Prepare release files
      run: |
        mkdir -p release-files
        cp artifacts/playlistcat-linux-x64/playlistcat-linux-x64.tar.gz release-files/
        cp artifacts/playlistcat-windows-x64/playlistcat-windows-x64.zip release-files/
        cp artifacts/playlistcat-macos-x64/playlistcat-macos-x64.tar.gz release-files/
        ls -la release-files/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version }}
        name: "PlaylistCat ${{ github.event.inputs.version }}"
        body: |
          # PlaylistCat ${{ github.event.inputs.version }}
          
          ## ðŸŽ‰ Major Features Added:
          
          **YouTube Music Authentication System**
          - Full YouTube Music integration with browser header extraction
          - SAPISIDHASH authorization header generation for secure API access
          - Multi-method authentication fallback system for reliability
          
          **Comprehensive Token Refresh System**
          - 30-minute automatic token monitoring with QTimer integration
          - Multi-method refresh strategies (headers, auth file, session)
          - Automatic retry logic with health checks
          
          **Server-Side Playlist Management**
          - Real playlist modification using YouTube Music's official API
          - Remove tracks from actual playlists (not just local display)
          - Enhanced remove_playlist_items API integration with proper error handling
          
          **Enhanced User Interface**
          - 5-column table layout with styled remove buttons
          - Server vs local removal status differentiation
          - Comprehensive confirmation dialogs with track details
          
          ## ðŸ“¦ Downloads
          
          Choose your platform:
          
          ### Windows
          - Download `playlistcat-windows-x64.zip`
          - Extract and run `run-gui.bat`
          
          ### macOS
          - Download `playlistcat-macos-x64.tar.gz`
          - Extract and run `./run-gui.sh`
          
          ### Linux
          - Download `playlistcat-linux-x64.tar.gz`
          - Extract and run `./run-gui.sh`
          
          **No Python installation required!**
        files: |
          release-files/playlistcat-linux-x64.tar.gz
          release-files/playlistcat-windows-x64.zip
          release-files/playlistcat-macos-x64.tar.gz
        draft: false
        prerelease: false
